// Senior Data Scientist.: Dr. Eddy Giusepe Chirinos Isidro
/*
RUN
---
go run arrays.go
*/

package main

import "fmt"

func main() {
	fmt.Println("=== EXEMPLOS PR√ÅTICOS DE ARRAYS EM GO ===")

	// PASSO 1: DECLARA√á√ÉO B√ÅSICA DE ARRAYS
	fmt.Println("\nüî∏ PASSO 1: Declara√ß√£o B√°sica de Arrays")
	fmt.Println("=========================================")

	// Declarando um array de 5 inteiros (inicializado com zeros):
	var numeros [5]int
	fmt.Printf("Array declarado e iniciado com zeros: %v\n", numeros)
	fmt.Println("Tamanho do array:", len(numeros))

	// PASSO 2: INICIALIZA√á√ÉO DE ARRAYS
	fmt.Println("\nüî∏ PASSO 2: Inicializa√ß√£o de Arrays")
	fmt.Println("=========================================")

	// Forma 1: Inicializa√ß√£o com valores espec√≠ficos:
	//idades := [5]int{25, 30, 35, 40, 45} // forma 1
	var idades = [5]int{25, 30, 35, 40, 45} // forma 2
	fmt.Printf("Array de idades inicializado (todos os valores): %v\n", idades)

	// Forma 2: Inicializa√ß√£o parcial (resto fica zero):
	notas := [5]float64{8.5, 9.2}
	fmt.Println("Array de notas parcialmente inicializado:", notas)

	// Forma 3: Go determina o tamanho automaticamente:
	frutas := [...]string{"ma√ß√£", "banana", "laranja", "uva", "manga"}
	fmt.Println("Array de frutas (tamanho autom√°tico):", frutas)
	fmt.Println("Tamanho do array de frutas:", len(frutas))

	// Forma 4: Inicializa√ß√£o com √≠ndices espec√≠ficos:
	cores := [5]string{0: "vermelho", 2: "azul", 3: "verde"}
	fmt.Printf("Array com √≠ndices espec√≠ficos: %v\n", cores)

	// PASSO 3: ACESSO E MODIFICA√á√ÉO DE ELEMENTOS
	fmt.Println("\nüî∏ PASSO 3: Acesso e Modifica√ß√£o de Elementos")
	fmt.Println("=============================================")

	// Acessando elementos individuais:
	fmt.Printf("Primeira idade: %d\n", idades[0])
	fmt.Println("Terceira idade:", idades[2])
	fmt.Println("")
	fmt.Println("√öltima fruta do meu array de frutas:", frutas[len(frutas)-1])

	// Modificando elementos:
	idades[2] = 33 // Alterando o terceiro elemento
	fmt.Println("Idades ap√≥s modifica√ß√£o: ", idades)

	// PASSO 4: ITERA√á√ÉO ATRAV√âS DE ARRAYS
	fmt.Println("\nüî∏ PASSO 4: Itera√ß√£o Atrav√©s de Arrays")
	fmt.Println("======================================")

	// M√©todo 1: For loop tradicional:
	fmt.Println("M√©todo 1 - For loop tradicional:")
	for i := 0; i < len(frutas); i++ {
		fmt.Printf("  √çndice %d: %s\n", i, frutas[i])
	}

	// M√©todo 2: Range apenas com valores (mais idiom√°tico em Go):
	fmt.Println("M√©todo 2 - Using range (recomendado):")
	for indice, fruta := range frutas {
		fmt.Printf("  Posi√ß√£o %d: %s\n", indice, fruta)
	}

	// M√©todo 3: Range apenas com valores (ignorando √≠ndice):
	fmt.Println("M√©todo 3 - Range apenas com valores:")
	for _, fruta := range frutas { // range --> √â uma Palavra-chave para itera√ß√£o
		fmt.Println("  Fruta:", fruta)
	}
}
